/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.mddarr.rides.event.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroRideRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1966818879551580682L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroRideRequest\",\"namespace\":\"org.mddarr.rides.event.dto\",\"fields\":[{\"name\":\"request_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"user_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"riders\",\"type\":\"int\"},{\"name\":\"destination\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroRideRequest> ENCODER =
      new BinaryMessageEncoder<AvroRideRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroRideRequest> DECODER =
      new BinaryMessageDecoder<AvroRideRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroRideRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroRideRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroRideRequest>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroRideRequest to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroRideRequest from a ByteBuffer. */
  public static AvroRideRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String request_id;
   private java.lang.String user_id;
   private int riders;
   private java.lang.String destination;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroRideRequest() {}

  /**
   * All-args constructor.
   * @param request_id The new value for request_id
   * @param user_id The new value for user_id
   * @param riders The new value for riders
   * @param destination The new value for destination
   */
  public AvroRideRequest(java.lang.String request_id, java.lang.String user_id, java.lang.Integer riders, java.lang.String destination) {
    this.request_id = request_id;
    this.user_id = user_id;
    this.riders = riders;
    this.destination = destination;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return request_id;
    case 1: return user_id;
    case 2: return riders;
    case 3: return destination;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: request_id = (java.lang.String)value$; break;
    case 1: user_id = (java.lang.String)value$; break;
    case 2: riders = (java.lang.Integer)value$; break;
    case 3: destination = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'request_id' field.
   * @return The value of the 'request_id' field.
   */
  public java.lang.String getRequestId() {
    return request_id;
  }

  /**
   * Sets the value of the 'request_id' field.
   * @param value the value to set.
   */
  public void setRequestId(java.lang.String value) {
    this.request_id = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.String getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'riders' field.
   * @return The value of the 'riders' field.
   */
  public java.lang.Integer getRiders() {
    return riders;
  }

  /**
   * Sets the value of the 'riders' field.
   * @param value the value to set.
   */
  public void setRiders(java.lang.Integer value) {
    this.riders = value;
  }

  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public java.lang.String getDestination() {
    return destination;
  }

  /**
   * Sets the value of the 'destination' field.
   * @param value the value to set.
   */
  public void setDestination(java.lang.String value) {
    this.destination = value;
  }

  /**
   * Creates a new AvroRideRequest RecordBuilder.
   * @return A new AvroRideRequest RecordBuilder
   */
  public static org.mddarr.rides.event.dto.AvroRideRequest.Builder newBuilder() {
    return new org.mddarr.rides.event.dto.AvroRideRequest.Builder();
  }

  /**
   * Creates a new AvroRideRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroRideRequest RecordBuilder
   */
  public static org.mddarr.rides.event.dto.AvroRideRequest.Builder newBuilder(org.mddarr.rides.event.dto.AvroRideRequest.Builder other) {
    return new org.mddarr.rides.event.dto.AvroRideRequest.Builder(other);
  }

  /**
   * Creates a new AvroRideRequest RecordBuilder by copying an existing AvroRideRequest instance.
   * @param other The existing instance to copy.
   * @return A new AvroRideRequest RecordBuilder
   */
  public static org.mddarr.rides.event.dto.AvroRideRequest.Builder newBuilder(org.mddarr.rides.event.dto.AvroRideRequest other) {
    return new org.mddarr.rides.event.dto.AvroRideRequest.Builder(other);
  }

  /**
   * RecordBuilder for AvroRideRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroRideRequest>
    implements org.apache.avro.data.RecordBuilder<AvroRideRequest> {

    private java.lang.String request_id;
    private java.lang.String user_id;
    private int riders;
    private java.lang.String destination;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.mddarr.rides.event.dto.AvroRideRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.request_id)) {
        this.request_id = data().deepCopy(fields()[0].schema(), other.request_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.riders)) {
        this.riders = data().deepCopy(fields()[2].schema(), other.riders);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroRideRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(org.mddarr.rides.event.dto.AvroRideRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.request_id)) {
        this.request_id = data().deepCopy(fields()[0].schema(), other.request_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user_id)) {
        this.user_id = data().deepCopy(fields()[1].schema(), other.user_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.riders)) {
        this.riders = data().deepCopy(fields()[2].schema(), other.riders);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'request_id' field.
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return request_id;
    }

    /**
      * Sets the value of the 'request_id' field.
      * @param value The value of 'request_id'.
      * @return This builder.
      */
    public org.mddarr.rides.event.dto.AvroRideRequest.Builder setRequestId(java.lang.String value) {
      validate(fields()[0], value);
      this.request_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'request_id' field has been set.
      * @return True if the 'request_id' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'request_id' field.
      * @return This builder.
      */
    public org.mddarr.rides.event.dto.AvroRideRequest.Builder clearRequestId() {
      request_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public org.mddarr.rides.event.dto.AvroRideRequest.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.user_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public org.mddarr.rides.event.dto.AvroRideRequest.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'riders' field.
      * @return The value.
      */
    public java.lang.Integer getRiders() {
      return riders;
    }

    /**
      * Sets the value of the 'riders' field.
      * @param value The value of 'riders'.
      * @return This builder.
      */
    public org.mddarr.rides.event.dto.AvroRideRequest.Builder setRiders(int value) {
      validate(fields()[2], value);
      this.riders = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'riders' field has been set.
      * @return True if the 'riders' field has been set, false otherwise.
      */
    public boolean hasRiders() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'riders' field.
      * @return This builder.
      */
    public org.mddarr.rides.event.dto.AvroRideRequest.Builder clearRiders() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public java.lang.String getDestination() {
      return destination;
    }

    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public org.mddarr.rides.event.dto.AvroRideRequest.Builder setDestination(java.lang.String value) {
      validate(fields()[3], value);
      this.destination = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public org.mddarr.rides.event.dto.AvroRideRequest.Builder clearDestination() {
      destination = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroRideRequest build() {
      try {
        AvroRideRequest record = new AvroRideRequest();
        record.request_id = fieldSetFlags()[0] ? this.request_id : (java.lang.String) defaultValue(fields()[0]);
        record.user_id = fieldSetFlags()[1] ? this.user_id : (java.lang.String) defaultValue(fields()[1]);
        record.riders = fieldSetFlags()[2] ? this.riders : (java.lang.Integer) defaultValue(fields()[2]);
        record.destination = fieldSetFlags()[3] ? this.destination : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroRideRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroRideRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroRideRequest>
    READER$ = (org.apache.avro.io.DatumReader<AvroRideRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
